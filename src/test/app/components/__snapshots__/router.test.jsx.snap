// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App Components - Router Not Found component renders 1`] = `
<div
  className="ui center aligned container"
>
  <h1
    className="ui header"
    style={
      Object {
        "fontSize": "4em",
        "marginTop": "1.5em",
      }
    }
  >
    Error 404
  </h1>
  <h2
    className="ui header"
  >
    Page not found. Go back to 
    <a
      href="/"
      onClick={[Function]}
    >
      home
    </a>
     page.
  </h2>
</div>
`;

exports[`App Components - Router renders 1`] = `
<Component>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "blank",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <withRouter(Connect(SizeDetector))>
        <Route
          render={[Function]}
        >
          <Connect(SizeDetector)
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "blank",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            location={
              Object {
                "hash": "",
                "pathname": "blank",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": false,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
          >
            <SizeDetector
              deviceTypeChanged={[Function]}
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "blank",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "pathname": "blank",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": false,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
            >
              <Connect(PureApp)
                deviceTypeChanged={[Function]}
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "createHref": [Function],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "blank",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "pathname": "blank",
                    "search": "",
                    "state": undefined,
                  }
                }
                match={
                  Object {
                    "isExact": false,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
              >
                <PureApp
                  deviceTypeChanged={[Function]}
                  error=""
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "createHref": [Function],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "blank",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  loadUser={[Function]}
                  location={
                    Object {
                      "hash": "",
                      "pathname": "blank",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": false,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  userLoaded={false}
                >
                  <div>
                    <Connect(PureHeader)>
                      <PureHeader
                        deviceMobile={false}
                        logoutUser={[Function]}
                        userAuthenticated={false}
                      >
                        <Segment
                          color="green"
                          textAlign="center"
                        >
                          <div
                            className="ui green center aligned segment"
                          >
                            <Grid
                              columns={3}
                            >
                              <div
                                className="ui three column grid"
                              >
                                <GridColumn>
                                  <div
                                    className="column"
                                  />
                                </GridColumn>
                                <GridColumn
                                  verticalAlign="middle"
                                >
                                  <div
                                    className="middle aligned column"
                                  >
                                    <Header
                                      as="h2"
                                    >
                                      <h2
                                        className="ui header"
                                      >
                                        Spotify Stats
                                      </h2>
                                    </Header>
                                  </div>
                                </GridColumn>
                                <GridColumn>
                                  <div
                                    className="column"
                                  >
                                    <Button
                                      as="button"
                                      color="green"
                                      floated="right"
                                      inverted={true}
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="ui green inverted right floated button"
                                        onClick={[Function]}
                                        role="button"
                                      >
                                        Log in with Spotify
                                      </button>
                                    </Button>
                                  </div>
                                </GridColumn>
                              </div>
                            </Grid>
                          </div>
                        </Segment>
                      </PureHeader>
                    </Connect(PureHeader)>
                    <ScreenLoader>
                      <Segment
                        basic={true}
                        className="body"
                      >
                        <div
                          className="ui basic segment body"
                        >
                          <Dimmer
                            active={true}
                            inverted={true}
                          >
                            <div
                              className="ui active transition visible inverted dimmer"
                              onClick={[Function]}
                            >
                              <div
                                className="content"
                              >
                                <div
                                  className="center"
                                >
                                  <Loader
                                    inverted={true}
                                    size="big"
                                  >
                                    <div
                                      className="ui big inverted loader"
                                    />
                                  </Loader>
                                </div>
                              </div>
                            </div>
                          </Dimmer>
                        </div>
                      </Segment>
                    </ScreenLoader>
                    <Footer>
                      <div />
                    </Footer>
                  </div>
                </PureApp>
              </Connect(PureApp)>
            </SizeDetector>
          </Connect(SizeDetector)>
        </Route>
      </withRouter(Connect(SizeDetector))>
    </Router>
  </BrowserRouter>
</Component>
`;
